[Q1. Recruiting Event Schedules]
Our company is organizing a series of university recruiting events. Each day, we host an event at one university, but sometimes we want to take a break for one day before moving on to the next university.
Given a sequence of universities, print all possible schedules of the recruiting events.
Input: a string of universities. Each university is represented as a single capital letter.
Output: all possible schedules. A lowercase letter “x” means we take a break.
Example

Input: String = “ABC”
Output:
ABC
ABxC
AxBC
AxBxC

public class Solution{
    public List<String> Q1(String input){
        List<String> result = new ArrayList<>();
        if(input==null) return result;
        StringBuilder sb = new StringBuilder();
        DFS(result, sb, input, 0);
        return result;
    }
    private void DFS(List<String> result, StringBuilder sb, String input, int index){
        if(index==input.length()-1){
            sb.append(input.charAt(index));
            result.add(new String(sb));
        }
        sb.append(input.charAt(index));
        DFS(result, sb, input, index+1);
        sb.append('x');
        DFS(result, sb.append(input.charAt(index)), input, index+1);
        sb.deleteCharAt(sb.length()-1);
}

[Q2. Cousins in a Binary Tree]
In a binary tree, two nodes are cousins of each other if they are at the same level and have different parents.
For example, in the following tree:

                     6

                  /     \

               3            5

            /     \      /     \

           7       8    1       2

7 and 1 are cousins.
3 and 5 are not cousins.
7 and 5 are not cousins.
Given a binary tree and two nodes, determine if the two nodes are cousins or not.

[Q3. Packing Up the Swags]
Our company is going to distribute swags at the recruiting event. We will put the swags into square-shaped boxes. Each box has to be completely filled so that the swags wouldn’t break during transportation. For example, a box can contain 1 swag, 4 swags, 9 swags, etc. (The boxes can be sufficiently large.)

However, if there are 10 swags, we have to put them into multiple boxes. For example, we could split them into four boxes.

Or maybe just two boxes are enough.

Given the number of swags, what is the minimum number of boxes to pack them up?

Example #1
Input: 4
Output: 1 (just one 2x2 box)

Example #2
Input: 10
Output: 2 (one 3x3 box and one 1x1 box)

Solution 1: Using DP
//M[i] is the min# of perfect squares needed to sum to i
//indection rule: M[i] = min(M[i-j*j]+1), for all j*j<=i
//base case M[0] = 0
//time O(n^2)
//space O(n)
public class Solution{
  public int solution(int target){
    if(target<=0) return 0;
    int[] M = new int[target+1];
    M[1] =1;
    for(int i=2; i<=target;i++){
      M[i] =i;
      for(int j=1;j*j<i;j++){
        M[i] = Math.min(M[i],1+M[i-j*j]);
      } 
    }
    return M[target];
  } 
}

Solution 2: Using DFS

[Q4. Infinite Loop Around the Dinner Table]
After the event, our company will take the students out for dinner. The restaurant has a large round table that can fit the whole party. 
We want to know if we can arrange the students so that the names of all students around the table form an “infinite loop.” For each pair of neighboring students s1 and s2, the last letter of s1’s name must be identical to the first letter of s2’s name.
For example, “ALICE” and “ERIC” can sit together, but “ALICE” and “BOB” cannot.

Given an array of names, determine if it is possible to arrange the students at the round table in this way.

Input: an array of names. Each name contains capital letters only.
Output: true or false.

Example
Input: String[] = {“ALICE”, “CHARLES”, “ERIC”, “SOPHIA”}
Output: true

Solution:
//it's a permutation problem
//time O(n!*n)
//space O(n)
public class Solution{
  public boolean solution(String[] array){
    if(array==null|| array.length==0) return true;
    return helper(array, 1);
  }
  private boolean helper(String[] arr, int index){
    //base case
    if(index==arr.length){
      return canConnect(arr[index-1], arr[0]);
    }
    for(int i=index;i<arr.length;i++){
      if(canConnect(arr[index-1], arr[i])){
        swap(arr, index, i);
        if(helper(arr, index+1)){
          return true;
        }
        swap(arr, index, i);
      }
    }
    return false;
  }//
  private boolean canConnect(String s1, String s2){
    return s1.charAt(s1.length()-1) == s2.charAt(0);
  }
  private void swap(String[] arr, int a, int b){
    int tmp = arr[a];
    arr[a] = arr[b];
    arr[b] = tmp;
  }//
}

